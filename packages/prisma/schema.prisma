// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id String @id @default(cuid())

    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    teams         UserOnTeam[] // All Teams that user are apart of.

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Team {
    id String @id @default(cuid())

    // Fields
    teamName String
    locked   Boolean @default(false)

    // Relationships
    users UserOnTeam[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UserOnTeam {
    // Fields
    role TeamMemberRole @default(USER)

    // Relationships
    userId String
    user   User   @relation(fields: [userId], references: [id])
    teamId String
    team   Team?  @relation(fields: [teamId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([userId, teamId])
}

enum TeamMemberRole {
    OWNER
    MANAGER
    USER
}
